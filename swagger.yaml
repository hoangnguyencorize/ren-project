paths:
  /api/booking:
    get:
      tags:
      - "booking"
      security:
        - Bearer: []
      summary: "get all booking "
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "booking"
      summary: "Updates a pet in the store with form data"
      operationId: "updatePetWithForm"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Booking"
      responses:
        "405":
          description: "Invalid input"
  /api/booking/{id}:
    get:
      tags:
      - "booking"
      security:
      - Bearer: []
      summary: "get booking by id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "booking"
      security:
      - Bearer: []
      summary: "update booking by id"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "booking"
      security:
      - Bearer: []
      summary: "delete booking by id"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /api/customer:
    get:
      tags:
      - "customer"
      summary: "get all customer"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "customer"
      summary: "get customer"
      parameters:
      - in: "body"
        name: "body"
        description: "create customer"
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /api/users:
    get:
      # security:
      #   - Bearer: []
      tags:
      - "user-system"
      summary: "get all user system"
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "user-system"
      security:
        - Bearer: []
      summary: "Create user system"
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserSystem"
      responses:
        default:
          description: "successful operation"

  /api/users/{id}:
    get:
      tags:
      - "user-system"
      security:
      - Bearer: []
      summary: "Get user system by id"
      description: ""
      operationId: "get user system by id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserSystem"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user-system"
      security:
      - Bearer: []
      summary: "Updated user system"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user-system"
      security:
      - Bearer: []
      produces:
      - "application/xml"
      - "application/json"
      summary: "delete user by id"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  UserSystem:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"

    xml:
      name: "User"

  User:
    type: "object"
    required:  # List the required properties here
    - firstName
    - lastName
    - phoneNumber
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      firstNameKana:
        type: "string"
      lastNameKana:
        type: "string"
      phoneNumber:
        type: "integer"
        format: "int64"
      gender:
        type: "string"
        enum: [ "male", "female", "other"]
      region:
        type: "string"
      language:
        type: "string"
    xml:
      name: "UserSystem"
  Booking:
    type: "object"
    required:  # List the required properties here
    - idUser
    - startAt
    - endAt
    properties:
      id:
        type: "integer"
        format: "int64"
      idUser:
        type: "integer"
        format: "int64"
      startAt:
        type: "string"
      endAt:
        type: "string"
      actualRentalTime :
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum: [ "1", "2", "3"]
    xml:
      name: "UserSystem"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
